services:
  db:                         # PostgreSQL 데이터베이스 컨테이너
    image: postgres:16-alpine # 공식 경량 이미지 사용
    restart: unless-stopped   # 예기치 않은 종료 시 항상 재기동, 수동 중지는 존중
    env_file: ${ENV_FILE:-.env.dev}
    environment:              # DB 사용자/비밀번호/DB명 주입
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD_FILE: ${DB_PASS_FILE:-}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      POSTGRES_DB: ${DB_NAME:-joinify}
    volumes:
      - db_data:/var/lib/postgresql/data  # 호스트 볼륨에 데이터 영구 저장
    networks: [internal]      # 동일 브리지 네트워크에 연결
    healthcheck:              # DB 준비 완료 판별
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:                    # API 서버
    build:
      context: ./backend      # ./backend Dockerfile 사용
    restart: unless-stopped
    env_file: ${ENV_FILE:-.env.dev}
    environment:
      # Keep plaintext versions for libraries that expect them
      DATABASE_URL: "postgres://${DB_USER}:${DB_PASS}@db:5432/${DB_NAME}"
      PORT: 4000
    depends_on:
      db:
        condition: service_healthy
    networks: [internal]

  frontend:                   # 정적 파일을 서빙하는 Nginx, React 빌드 결과
    build:
      context: ./frontend
    working_dir: /web
    restart: unless-stopped
    env_file: ${ENV_FILE:-.env.dev}
    networks: [internal]
    # dev 에서는 Nginx 없이 Vite dev 서버를 띄우므로 포트/command 는 override 에서

  nginx:
    build:
      context: ./nginx
    restart: unless-stopped
    depends_on: [frontend, backend]
    ports:             # prod 에서만 host 80/443 노출
      - "80:80"
    networks: [internal]

volumes:
  db_data:                    # PostgreSQL 데이터가 사라지지 않도록 정의

networks:
  internal:
    driver: bridge            # 기본 브리지. 외부에 노출되지 않음
